[{"path":"https://davzim.github.io/dataverifyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 dataverifyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://davzim.github.io/dataverifyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Zimmermann-Kollenda. Author, maintainer.","code":""},{"path":"https://davzim.github.io/dataverifyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zimmermann-Kollenda D (2023). dataverifyr: Lightweight, Flexible, Fast Data Validation Package Can Handle Sizes Data. https://github.com/DavZim/dataverifyr, https://davzim.github.io/dataverifyr/.","code":"@Manual{,   title = {dataverifyr: A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data},   author = {David Zimmermann-Kollenda},   year = {2023},   note = {https://github.com/DavZim/dataverifyr, https://davzim.github.io/dataverifyr/}, }"},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"dataverifyr---a-lightweight-flexible-and-fast-data-validation-package-that-can-handle-all-sizes-of-data","dir":"","previous_headings":"","what":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"goal dataverifyr allow wide variety flexible data validation checks (verifications). means, can specify set rules (R expressions) compare arbitrary dataset . package built way, adapts type data choice data package (data.frame, data.table, tibble, arrow, SQL connection) chooses right data backend automatically, especially handy large complicated datasets involved. way, can concentrate writing rules making sure data valid rather spending time writing boilerplate code. package lightweight heavy dependencies Suggests-, means want use data.table task, don’t need install packages (arrow, DBI, etc) unless explicitly tell R install suggested packages well installing package. backend analysis automatically chosen based type input dataset well available packages. using underlying technologies handing evaluation code backend, package can deal sizes data backends can deal .","code":""},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"can install development version dataverifyr like :","code":"# development version # devtools::install_github(\"DavZim/dataverifyr\")  # CRAN release install.packages(\"dataverifyr\")"},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"basic example shows create rule set manually, consisting R expressions check dataset matches given rules save load rules yaml-file better maintainability Note rule R expression evaluated within dataset. first rule, example, states believe values mpg variable range 10 30 (exclusive). moment rules work window/vectorized approach , means rule like work mpg > 10 * wt, whereas rule like sum(mpg) > 0 work aggregates values. can see, dataset mtcars conform rules. four fails (fail=rule met) first rule mpg > 10 & mpg < 30 (mpg values 33.9) seven fails second rule cyl %% c(4, 8) (cyl values 6), third rule vs %% c(0, 1) always met. see values meet expectations, use filter_fails() function can also visualize results using plot_res() function.  Note can also save load ruleset yaml file resulting example_rules.yaml looks like ","code":"library(dataverifyr)  # define a rule set within our R code; alternatively in a yaml file rules <- ruleset(   rule(mpg > 10 & mpg < 30), # mpg goes up to 34   rule(cyl %in% c(4, 8)), # missing 6 cyl   rule(vs %in% c(0, 1), allow_na = TRUE) )  # print the rules rules #> <Verification Ruleset with 3 elements> #>   [1] 'Rule for: mpg' matching `mpg > 10 & mpg < 30` (allow_na: FALSE) #>   [2] 'Rule for: cyl' matching `cyl %in% c(4, 8)` (allow_na: FALSE) #>   [3] 'Rule for: vs' matching `vs %in% c(0, 1)` (allow_na: TRUE)  # check if the data matches our rules res <- check_data(mtcars, rules) res #>             name                expr allow_na negate tests pass fail warn error              time #> 1: Rule for: mpg mpg > 10 & mpg < 30    FALSE  FALSE    32   28    4            0.0054011345 secs #> 2: Rule for: cyl    cyl %in% c(4, 8)    FALSE  FALSE    32   25    7            0.0033059120 secs #> 3:  Rule for: vs     vs %in% c(0, 1)     TRUE  FALSE    32   32    0            0.0004060268 secs filter_fails(res, mtcars, per_rule = TRUE) #> $`mpg > 10 & mpg < 30` #>     mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1: 32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1 #> 2: 30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2 #> 3: 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1 #> 4: 30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2 #>  #> $`cyl %in% c(4, 8)` #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1: 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2: 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3: 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 4: 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 5: 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 6: 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 7: 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 plot_res(res) write_rules(rules, \"example_rules.yaml\") r2 <- read_rules(\"example_rules.yaml\") identical(rules, r2) #> [1] TRUE - name: 'Rule for: mpg'   expr: mpg > 10 & mpg < 30   allow_na: no   negate: no   index: 1 - name: 'Rule for: cyl'   expr: cyl %in% c(4, 8)   allow_na: no   negate: no   index: 2 - name: 'Rule for: vs'   expr: vs %in% c(0, 1)   allow_na: yes   negate: no   index: 3"},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"backends","dir":"","previous_headings":"","what":"Backends","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"moment following backends supported. Note automatically chosen based data type package availability. Eg, dataset dplyr::tbl() connected SQLite database, package automatically choose RSQLite/DBI/dbplyr task. base-R data.frame data.table dplyr available, used faster speeds. dplyr tibble data.table data.table arrow Table, ArrowTabular, ArrowObject arrow FileSystemDataset, Dataset, ArrowObject RSQLite, DBI, dbplyr tbl_SQLiteConnection, tbl_dbi, tbl_sql, tbl_lazy, tbl Note missing values converted 0 using sqlite default (c.f. answer) duckdb, DBI, dbplyr tbl_duckdb_connection, tbl_dbi, tbl_sql, tbl_lazy, tbl RPostgres, DBI, dbplyr tbl_PqConnection, tbl_dbi, tbl_sql, tbl_lazy, tbl tested, work ---box using DBI Note rs object example code refers ruleset(). Larger complete examples can found .","code":"data <- data.frame(x = 1:10) check_data(rs, data) library(dplyr) data <- tibble(x = 1:10) check_data(rs, data) library(data.table) data <- data.table(x = 1:10) check_data(rs, data) library(arrow) data <- arrow_table(x = 1:10) # Alternatively: data <- read_parquet(   file,   as_data_frame = FALSE ) check_data(rs, data) library(arrow) data <- open_dataset(dir) check_data(rs, data) library(DBI) con <- dbConnect(RSQLite::SQLite()) # dbWriteTable(con, tablename, data) tbl <- dplyr::tbl(con, tablename) check_data(rs, tbl)  dbDisconnect(con) library(DBI) con <- dbConnect(duckdb::duckdb()) # dbWriteTable(con, tablename, data) tbl <- dplyr::tbl(con, tablename) check_data(rs, tbl)  dbDisconnect(con, shutdown = TRUE) library(DBI) con <- dbConnect(   RPostgres::Postgres(),    ... ) # dbWriteTable(con, tablename, data) tbl <- dplyr::tbl(con, tablename) check_data(rs, tbl)  dbDisconnect(con)"},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"larger-example-using-the-arrow-backend","dir":"","previous_headings":"","what":"Larger Example using the arrow backend","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"involved example, using different backend, let’s say larger dataset taxi trips NY (see also official source data), saved local arrow dataset (using parquet data format), want make sure variables -line expectations/rules.","code":""},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"id_1-download-and-prepare-data","dir":"","previous_headings":"Larger Example using the arrow backend","what":"1 Download and Prepare Data","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"First prepare data downloading writing dataset .parquet files. needs done shown reproducibility reasons , actual dataverifyr code shown next block","code":"library(arrow) url <- \"https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2018-01.parquet\" file <- \"yellow_tripdata_2018-01.parquet\" if (!file.exists(file)) download.file(url, file, method = \"curl\") file.size(file) / 1e6 # in MB #> [1] 123.6685  # quick check of the filesize d <- read_parquet(file) dim(d) #> [1] 8760687      19 names(d) #>  [1] \"VendorID\"              \"tpep_pickup_datetime\"  \"tpep_dropoff_datetime\" \"passenger_count\"       #>  [5] \"trip_distance\"         \"RatecodeID\"            \"store_and_fwd_flag\"    \"PULocationID\"          #>  [9] \"DOLocationID\"          \"payment_type\"          \"fare_amount\"           \"extra\"                 #> [13] \"mta_tax\"               \"tip_amount\"            \"tolls_amount\"          \"improvement_surcharge\" #> [17] \"total_amount\"          \"congestion_surcharge\"  \"airport_fee\"  # write the dataset to disk write_dataset(d, \"nyc-taxi-data\")"},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"id_2-create-rules-in-yaml","dir":"","previous_headings":"Larger Example using the arrow backend","what":"2 Create Rules in yaml","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"Next, can create rules use check data. saw earlier, can create rules R using rule() ruleset() functions, however, (opinion) preferred option separate code rules writing rules separate yaml file reading R. First display hand-written contents nyc_data_rules.yaml file. , can load, display, finally check rules data","code":"- name: 'Rule for: passenger_count'   expr: passenger_count >= 0 & passenger_count <= 10   allow_na: no   negate: no   index: 1 - name: 'Rule for: trip_distance'   expr: trip_distance >= 0 & trip_distance <= 1000   allow_na: no   negate: no   index: 2 - name: 'Rule for: payment_type'   expr: payment_type %in% c(0, 1, 2, 3, 4)   allow_na: no   negate: no   index: 3 rules <- read_rules(\"nyc_data_rules.yaml\") rules #> <Verification Ruleset with 3 elements> #>   [1] 'Rule for: passenger_count' matching `passenger_count >= 0 & passenger_count <= 10` (allow_na: FALSE) #>   [2] 'Rule for: trip_distance' matching `trip_distance >= 0 & trip_distance <= 1000` (allow_na: FALSE) #>   [3] 'Rule for: payment_type' matching `payment_type %in% c(0, 1, 2, 3, 4)` (allow_na: FALSE)"},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"id_3-verify-that-the-data-matches-the-given-rules","dir":"","previous_headings":"Larger Example using the arrow backend","what":"3 Verify that the Data matches the given Rules","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"Now can check data follows rules unexpected data points:  Using power arrow, able scan 8+mln observations three rules 1.5 seconds (YMMV). can see results, one unexpected value, lets quickly investigate using filter_fails() function, filters dataset failed rule matches can see, probably data error (trip distance 190k miles 1 minute seems - ehm stellar…).","code":"# open the dataset  ds <- open_dataset(\"nyc-taxi-data/\")  # perform the data validation check res <- check_data(ds, rules) res #> # A tibble: 3 × 10 #>   name                      expr              allow…¹ negate   tests    pass  fail warn  error time  #>   <chr>                     <chr>             <lgl>   <lgl>    <int>   <int> <int> <chr> <chr> <drt> #> 1 Rule for: passenger_count passenger_count … FALSE   FALSE  8760687 8760687     0 \"\"    \"\"    0.74… #> 2 Rule for: trip_distance   trip_distance >=… FALSE   FALSE  8760687 8760686     1 \"\"    \"\"    0.50… #> 3 Rule for: payment_type    payment_type %in… FALSE   FALSE  8760687 8760687     0 \"\"    \"\"    0.45… #> # … with abbreviated variable name ¹​allow_na  plot_res(res) res |>   filter_fails(ds) |>    # only select a couple of variables for brevity   dplyr::select(tpep_pickup_datetime, tpep_dropoff_datetime, trip_distance) #> # A tibble: 1 × 3 #>   tpep_pickup_datetime tpep_dropoff_datetime trip_distance #>   <dttm>               <dttm>                        <dbl> #> 1 2018-01-30 12:41:02  2018-01-30 12:42:09         189484."},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"using-a-dbi-backend","dir":"","previous_headings":"","what":"Using a DBI Backend","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"SQLite duckdb database, can use package like ","code":"library(DBI) library(dplyr)  # connect to a duckdb database con <- dbConnect(duckdb::duckdb(\"duckdb-database.duckdb\")) # for demo purposes write the data once dbWriteTable(con, \"mtcars\", mtcars)  # create a tbl connection, which can be used in the checks tbl <- tbl(con, \"mtcars\")  # create rules rules <- ruleset(   rule(mpg > 10 & mpg < 30),   rule(cyl %in% c(4, 8)),   rule(vs %in% c(0, 1), allow_na = TRUE) )  # check rules res <- check_data(tbl, rules) res #> # A tibble: 3 × 10 #>   name          expr                allow_na negate tests  pass  fail warn  error time            #>   <chr>         <chr>               <lgl>    <lgl>  <dbl> <dbl> <dbl> <chr> <chr> <drtn>          #> 1 Rule for: mpg mpg > 10 & mpg < 30 FALSE    FALSE     32    28     4 \"\"    \"\"    0.03803802 secs #> 2 Rule for: cyl cyl %in% c(4, 8)    FALSE    FALSE     32    25     7 \"\"    \"\"    0.02827501 secs #> 3 Rule for: vs  vs %in% c(0, 1)     TRUE     FALSE     32    32     0 \"\"    \"\"    0.03140306 secs  filter_fails(res, tbl, per_rule = TRUE) #> $`mpg > 10 & mpg < 30` #> # A tibble: 4 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  32.4     4  78.7    66  4.08 2.2   19.47     1     1     4     1 #> 2  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2 #> 3  33.9     4  71.1    65  4.22 1.835 19.9      1     1     4     1 #> 4  30.4     4  95.1   113  3.77 1.513 16.9      1     1     5     2 #>  #> $`cyl %in% c(4, 8)` #> # A tibble: 7 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6 160     110  3.9  2.62  16.46     0     1     4     4 #> 2  21       6 160     110  3.9  2.875 17.02     0     1     4     4 #> 3  21.4     6 258     110  3.08 3.215 19.44     1     0     3     1 #> 4  18.1     6 225     105  2.76 3.46  20.22     1     0     3     1 #> 5  19.2     6 167.6   123  3.92 3.44  18.3      1     0     4     4 #> 6  17.8     6 167.6   123  3.92 3.44  18.9      1     0     4     4 #> 7  19.7     6 145     175  3.62 2.77  15.5      0     1     5     6  # lastly disconnect from the database again dbDisconnect(con, shutdown = TRUE)"},{"path":"https://davzim.github.io/dataverifyr/index.html","id":"alternative-data-validation-r-libraries","dir":"","previous_headings":"","what":"Alternative Data Validation R Libraries","title":"A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data","text":"library looking , following might good alternatives validate data: pointblank validate data.validator","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a dataset confirms to a given set of rules — check_data","title":"Checks if a dataset confirms to a given set of rules — check_data","text":"Checks dataset confirms given set rules","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a dataset confirms to a given set of rules — check_data","text":"","code":"check_data(x, rules, fail_on_warn = FALSE, fail_on_error = FALSE)"},{"path":"https://davzim.github.io/dataverifyr/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a dataset confirms to a given set of rules — check_data","text":"x dataset, either data.frame, dplyr::tibble, data.table::data.table, arrow::arrow_table, arrow::open_dataset, dplyr::tbl (SQL connection) rules list rules fail_on_warn function throw error warning fail_on_error function throw error failed rule","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a dataset confirms to a given set of rules — check_data","text":"data.frame-like object one row rule results","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/check_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a dataset confirms to a given set of rules — check_data","text":"","code":"rs <- ruleset(   rule(mpg > 10),   rule(cyl %in% c(4, 6)), # missing 8   rule(qsec >= 14.5 & qsec <= 22.9) ) rs #> <Verification Ruleset with 3 elements> #>   [1] 'Rule for: mpg' matching `mpg > 10` (allow_na: FALSE) #>   [2] 'Rule for: cyl' matching `cyl %in% c(4, 6)` (allow_na: FALSE) #>   [3] 'Rule for: qsec' matching `qsec >= 14.5 & qsec <= 22.9` (allow_na: FALSE)  check_data(mtcars, rs) #>              name                        expr allow_na negate tests pass fail #> 1:  Rule for: mpg                    mpg > 10    FALSE  FALSE    32   32    0 #> 2:  Rule for: cyl            cyl %in% c(4, 6)    FALSE  FALSE    32   18   14 #> 3: Rule for: qsec qsec >= 14.5 & qsec <= 22.9    FALSE  FALSE    32   32    0 #>    warn error             time #> 1:            0.007976770 secs #> 2:            0.004161835 secs #> 3:            0.000415802 secs"},{"path":"https://davzim.github.io/dataverifyr/reference/filter_fails.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a result dataset for the values that failed the verification — filter_fails","title":"Filters a result dataset for the values that failed the verification — filter_fails","text":"Filters result dataset values failed verification","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/filter_fails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a result dataset for the values that failed the verification — filter_fails","text":"","code":"filter_fails(res, x, per_rule = FALSE)"},{"path":"https://davzim.github.io/dataverifyr/reference/filter_fails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a result dataset for the values that failed the verification — filter_fails","text":"res result data.frame outputted check_data() x dataset used check_data() per_rule set TRUE, list filtered data returned, one failed verification rule. set FALSE, data.frame returned values fail rule.","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/filter_fails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters a result dataset for the values that failed the verification — filter_fails","text":"dataset entries match given rules","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/filter_fails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a result dataset for the values that failed the verification — filter_fails","text":"","code":"rules <- ruleset(   rule(mpg > 10 & mpg < 30), # mpg goes up to 34   rule(cyl %in% c(4, 8)), # missing 6 cyl   rule(vs %in% c(0, 1), allow_na = TRUE) )  res <- check_data(mtcars, rules)  fails <- filter_fails(res, mtcars) fails #>      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #>  1: 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #>  2: 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #>  3: 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #>  4: 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #>  5: 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #>  6: 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #>  7: 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #>  8: 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #>  9: 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 10: 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 11: 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6"},{"path":"https://davzim.github.io/dataverifyr/reference/plot_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the results of a data validation — plot_res","title":"Visualize the results of a data validation — plot_res","text":"Visualize results data validation","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/plot_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the results of a data validation — plot_res","text":"","code":"plot_res(   res,   main = \"Verification Results per Rule\",   colors = c(pass = \"#308344\", fail = \"#E66820\"),   labels = TRUE,   table = TRUE )"},{"path":"https://davzim.github.io/dataverifyr/reference/plot_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the results of a data validation — plot_res","text":"res data.frame returned check_data() main title plot colors named list colors, names pass fail labels whether values displayed barplot table show table legend values","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/plot_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the results of a data validation — plot_res","text":"base r plot","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/plot_res.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the results of a data validation — plot_res","text":"","code":"rs <- ruleset(   rule(Ozone > 0 & Ozone < 120, allow_na = TRUE), # some mising values and > 120   rule(Solar.R > 0, allow_na = TRUE),   rule(Solar.R < 200, allow_na = TRUE),   rule(Wind > 10),   rule(Temp < 100) )  res <- check_data(airquality, rs) plot_res(res)"},{"path":"https://davzim.github.io/dataverifyr/reference/rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a single data rule — rule","title":"Creates a single data rule — rule","text":"Creates single data rule","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a single data rule — rule","text":"","code":"rule(expr, name = NA, allow_na = FALSE, negate = FALSE, ...)  # S3 method for rule print(x, ...)"},{"path":"https://davzim.github.io/dataverifyr/reference/rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a single data rule — rule","text":"expr expression dictates determines rule good. Note expression evaluated check_data(), within given framework. means, example data given check_data() arrow dataset, expression must mappable arrow (see also arrow documentation). expression can given string well. name optional name rule reference allow_na rule allow NA values? default value FALSE negate rule negated, applies expression allow_na, , expr = mpg > 10, allow_na = TRUE, negate = TRUE, match mpg <= 10 well NAs. ... additional arguments carried along documentation, used. example date, person, contact, comment, etc x rule print","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a single data rule — rule","text":"rule values list","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/rule.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Creates a single data rule — rule","text":"print(rule): Prints rule","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a single data rule — rule","text":"","code":"r <- rule(mpg > 10) r #> <Verification Rule> #>   expr: 'mpg > 10' #>   name: 'Rule for: mpg' #>   allow NA: FALSE #>   negated:  FALSE  r2 <- rule(mpg > 10, name = \"check that mpg is reasonable\", allow_na = TRUE,            negate = FALSE, author = \"me\", date = Sys.Date()) r2 #> <Verification Rule> #>   expr: 'mpg > 10' #>   name: 'check that mpg is reasonable' #>   allow NA: TRUE #>   negated:  FALSE #>   author: 'me' #>   date: '2023-04-24'  check_data(mtcars, r) #>             name     expr allow_na negate tests pass fail warn error #> 1: Rule for: mpg mpg > 10    FALSE  FALSE    32   32    0            #>                 time #> 1: 0.0009422302 secs  rs <- ruleset(   rule(mpg > 10),   rule(cyl %in% c(4, 6)), # missing 8   rule(qsec >= 14.5 & qsec <= 22.9) ) rs #> <Verification Ruleset with 3 elements> #>   [1] 'Rule for: mpg' matching `mpg > 10` (allow_na: FALSE) #>   [2] 'Rule for: cyl' matching `cyl %in% c(4, 6)` (allow_na: FALSE) #>   [3] 'Rule for: qsec' matching `qsec >= 14.5 & qsec <= 22.9` (allow_na: FALSE) check_data(mtcars, rs) #>              name                        expr allow_na negate tests pass fail #> 1:  Rule for: mpg                    mpg > 10    FALSE  FALSE    32   32    0 #> 2:  Rule for: cyl            cyl %in% c(4, 6)    FALSE  FALSE    32   18   14 #> 3: Rule for: qsec qsec >= 14.5 & qsec <= 22.9    FALSE  FALSE    32   32    0 #>    warn error              time #> 1:            0.0004343987 secs #> 2:            0.0015299320 secs #> 3:            0.0003736019 secs"},{"path":"https://davzim.github.io/dataverifyr/reference/ruleset.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a set of rules — ruleset","title":"Creates a set of rules — ruleset","text":"Creates set rules","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/ruleset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a set of rules — ruleset","text":"","code":"ruleset(...)  # S3 method for ruleset print(x, n = 3, ...)"},{"path":"https://davzim.github.io/dataverifyr/reference/ruleset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a set of rules — ruleset","text":"... list rules x ruleset print n maximum number rules print","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/ruleset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a set of rules — ruleset","text":"list rules ruleset","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/ruleset.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Creates a set of rules — ruleset","text":"print(ruleset): Prints ruleset","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/ruleset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a set of rules — ruleset","text":"","code":"r1 <- rule(mpg > 10) r2 <- rule(mpg < 20) rs <- ruleset(r1, r2) rs #> <Verification Ruleset with 2 elements> #>   [1] 'Rule for: mpg' matching `mpg > 10` (allow_na: FALSE) #>   [2] 'Rule for: mpg' matching `mpg < 20` (allow_na: FALSE)  rs <- ruleset(   rule(cyl %in% c(4, 6, 8)),   rule(is.numeric(disp)) ) rs #> <Verification Ruleset with 2 elements> #>   [1] 'Rule for: cyl' matching `cyl %in% c(4, 6, 8)` (allow_na: FALSE) #>   [2] 'Rule for: disp' matching `is.numeric(disp)` (allow_na: FALSE)"},{"path":"https://davzim.github.io/dataverifyr/reference/write_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write rules to a yaml file — write_rules","title":"Read and write rules to a yaml file — write_rules","text":"Read write rules yaml file","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/write_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write rules to a yaml file — write_rules","text":"","code":"write_rules(x, file)  read_rules(file)"},{"path":"https://davzim.github.io/dataverifyr/reference/write_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write rules to a yaml file — write_rules","text":"x list rules file filename","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/write_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write rules to a yaml file — write_rules","text":"filename invisibly","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/write_rules.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Read and write rules to a yaml file — write_rules","text":"read_rules(): reads ruleset back ","code":""},{"path":"https://davzim.github.io/dataverifyr/reference/write_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write rules to a yaml file — write_rules","text":"","code":"rr <- ruleset(   rule(mpg > 10),   rule(cyl %in% c(4, 6, 8)) ) file <- tempfile(fileext = \".yml\") write_rules(rr, file)"},{"path":"https://davzim.github.io/dataverifyr/news/index.html","id":"dataverifyr-012","dir":"Changelog","previous_headings":"","what":"dataverifyr 0.1.2","title":"dataverifyr 0.1.2","text":"fixed NOTEs CRAN release","code":""},{"path":"https://davzim.github.io/dataverifyr/news/index.html","id":"dataverifyr-010","dir":"Changelog","previous_headings":"","what":"dataverifyr 0.1.0","title":"dataverifyr 0.1.0","text":"first stable version Added NEWS.md file track changes package.","code":""}]
